{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Example from \"../components/Example\";\nimport { H1, Subheading, H2 } from \"../components/Elements\";\nimport { useState } from \"react\";\n\nconst Alert = ({\n  color = \"blue\",\n  children\n}) => {\n  const {\n    0: show,\n    1: setShow\n  } = useState(true);\n  return show ? __jsx(\"div\", {\n    className: `rounded border border-${color}-400 text-${color}-800 bg-${color}-200 p-4 mb-4 relative`,\n    role: \"alert\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"absolute top-0 right-0 px-4 py-3 text-xl font-bold\",\n    datadismiss: \"alert\",\n    \"aria-label\": \"Close\",\n    onClick: () => setShow(false)\n  }, __jsx(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\")), children) : null;\n};\n\nexport default (() => __jsx(\"div\", null, __jsx(H1, null, \"Alerts\"), __jsx(Subheading, null, \"Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.\"), __jsx(\"h2\", {\n  className: \"font-medium text-3xl mt-10\"\n}, \"Examples\"), __jsx(\"p\", null, \"Alerts are available for any length of text, as well as an optional dismiss button. For inline dismissal, use a javascript framework that can listen for click events on the close button.\"), __jsx(Example, {\n  code: `<div class=\"rounded border border-blue-400 text-blue-800 bg-blue-200 p-4 mb-4 font-mono\" role=\"alert\">\nA simple primary alert—check it out!\n</div>\n\n<div class=\"rounded border border-gray-400 text-gray-800 bg-gray-200 p-4 mb-4\" role=\"alert\">\nA simple secondary alert—check it out!\n</div>\n\n<div class=\"rounded border border-green-400 text-green-800 bg-green-200 p-4 mb-4\" role=\"alert\">\nA simple success alert—check it out!\n</div>\n\n<div class=\"rounded border border-red-400 text-red-800 bg-red-200 p-4 mb-4\" role=\"alert\">\nA simple danger alert—check it out!\n</div>\n\n<div class=\"rounded border border-yellow-400 text-yellow-800 bg-yellow-200 p-4 mb-4\" role=\"alert\">\nA simple warning alert—check it out!\n</div>\n\n<div class=\"rounded border border-teal-400 text-teal-800 bg-teal-200 p-4 mb-4\" role=\"alert\">\nA simple info alert—check it out!\n</div>\n`\n}), __jsx(H2, null, \"React Component Example\"), __jsx(\"p\", null, \"Tailstrap alerts can be used much less verbosely if made into a React component.\"), __jsx(Example, {\n  code: `const Alert = ({ color = \"blue\", children }) => {\n  const [show, setShow] = useState(true);\n\n  return show ? (\n    <div\n      className={\\`rounded border border-$\\{color}-400 text-$\\{color}-800 bg-$\\{color}-200 p-4 mb-4 relative\\`}\n      role=\"alert\"\n    >\n      <button\n        type=\"button\"\n        className=\"absolute top-0 right-0 px-4 py-3 text-xl font-bold\"\n        datadismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={() => setShow(false)}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n      {children}\n    </div>\n  ) : null;\n};\n\n<Alert color=\"green\">A simple success alert—check it out!</Alert>\n`\n}, __jsx(Alert, {\n  color: \"green\"\n}, \"A simple success alert\\u2014check it out!\"))));","map":null,"metadata":{},"sourceType":"module"}